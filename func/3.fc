forall X -> tuple just_tuple(X x) asm "NOP";
(slice, (slice, int)) safe_load_msg_addr(slice sc) asm(-> 1 0 2) "LDMSGADDRQ NULLROTRIFNOT";

() recv_internal() { }

(int, tuple) validate_message(cell message) method_id {
	slice src = null();
	slice dest = null();
	int amount = 0;
	slice cs = message.begin_parse();
	if (cs.slice_data_empty?()) {
		return (0, null());
	}
	int c0 = cs~load_uint(1);
	if (c0) {
		if (cs.slice_data_empty?()) {
			return (0, null());
		}
		int c1 = cs~load_uint(1);
		if (c1) {
			(src, int ok) = cs~safe_load_msg_addr();
			if (~ ok) {
				return (0, null());
			}
			if ((src.slice_bits() == 2) & (src.preload_uint(2) == 0)) {
				src = null();
			}
			(dest, int ok) = cs~safe_load_msg_addr();
			if (~ ok) {
				return (0, null());
			}
			if ((dest.slice_bits() == 2) & (dest.preload_uint(2) == 0)) {
				dest = null();
			}
			if (cs.slice_bits() < 96) {
				return (0, null());
			}
			cs~load_bits(96);
			amount = null();
		} else {
			(src, int ok) = cs~safe_load_msg_addr();
			if (~ ok) {
				return (0, null());
			}
			if ((src.slice_bits() == 2) & (src.preload_uint(2) == 0)) {
				src = null();
			}
			(dest, int ok) = cs~safe_load_msg_addr();
			if (~ ok) {
				return (0, null());
			}
			if ((dest.slice_bits() == 2) & (dest.preload_uint(2) == 0)) {
				dest = null();
			}
			if (cs.slice_bits() < 4) {
				return (0, null());
			}
			int byte_len = cs~load_uint(4);
			if (byte_len > 16) {
				return (0, null());
			}
			if (cs.slice_bits() < byte_len * 8) {
				return (0, null());
			}
			cs~load_uint(byte_len * 8);
			amount = null();
		}
	} else {
		if (cs.slice_bits() < 3) {
			return (0, null());
		}
		cs~load_bits(3);
		(src, int ok) = cs~safe_load_msg_addr();
		if (~ ok) {
			return (0, null());
		}
		if ((src.slice_bits() == 2) & (src.preload_uint(2) == 0)) {
			src = null();
		}
		(dest, int ok) = cs~safe_load_msg_addr();
		if (~ ok) {
			return (0, null());
		}
		if ((dest.slice_bits() == 2) & (dest.preload_uint(2) == 0)) {
			dest = null();
		}
		if (cs.slice_bits() < 4) {
			return (0, null());
		}
		int byte_len = cs~load_uint(4);
		if (byte_len > 16) {
			return (0, null());
		}
		if (cs.slice_bits() < byte_len * 8) {
			return (0, null());
		}
		amount = cs~load_uint(byte_len * 8);
		if (cs.slice_data_empty?()) {
			return (0, null());
		}
		if (cs.slice_data_empty?()) {
			return (0, null());
		}
		int expected_bit = cs~load_uint(1);
		if (expected_bit != 0) {
			return (0, null());
		}
		if (cs.slice_bits() < 4) {
			return (0, null());
		}
		int byte_len = cs~load_uint(4);
		if (byte_len > 16) {
			return (0, null());
		}
		if (cs.slice_bits() < byte_len * 8) {
			return (0, null());
		}
		cs~load_uint(byte_len * 8);
		if (cs.slice_bits() < 4) {
			return (0, null());
		}
		int byte_len = cs~load_uint(4);
		if (byte_len > 16) {
			return (0, null());
		}
		if (cs.slice_bits() < byte_len * 8) {
			return (0, null());
		}
		cs~load_uint(byte_len * 8);
		if (cs.slice_bits() < 96) {
			return (0, null());
		}
		cs~load_bits(96);
	}
	if (cs.slice_data_empty?()) {
		return (0, null());
	}
	int maybe_cons = cs~load_uint(1);
	if (maybe_cons) {
		if (cs.slice_data_empty?()) {
			return (0, null());
		}
		int either_cons = cs~load_uint(1);
		if (either_cons) {
			if (cs.slice_refs() == 0) {
				return (0, null());
			}
			cell state_init_cell = cs~load_ref();
			slice state_init_slice = state_init_cell.begin_parse();
			if (state_init_slice.slice_data_empty?()) {
				return (0, null());
			}
			int maybe_cons = state_init_slice~load_uint(1);
			if (maybe_cons) {
				if (state_init_slice.slice_bits() < 5) {
					return (0, null());
				}
				state_init_slice~load_bits(5);
			}
			if (state_init_slice.slice_data_empty?()) {
				return (0, null());
			}
			int maybe_cons = state_init_slice~load_uint(1);
			if (maybe_cons) {
				if (state_init_slice.slice_bits() < 2) {
					return (0, null());
				}
				state_init_slice~load_bits(2);
			}
			if (state_init_slice.slice_data_empty?()) {
				return (0, null());
			}
			int maybe_cons = state_init_slice~load_uint(1);
			if (maybe_cons) {
				if (state_init_slice.slice_refs() == 0) {
					return (0, null());
				}
				state_init_slice~load_ref();
			}
			if (state_init_slice.slice_data_empty?()) {
				return (0, null());
			}
			int maybe_cons = state_init_slice~load_uint(1);
			if (maybe_cons) {
				if (state_init_slice.slice_refs() == 0) {
					return (0, null());
				}
				state_init_slice~load_ref();
			}
			if (state_init_slice.slice_data_empty?()) {
				return (0, null());
			}
			if (state_init_slice.slice_data_empty?()) {
				return (0, null());
			}
			int expected_bit = state_init_slice~load_uint(1);
			if (expected_bit != 0) {
				return (0, null());
			}
		} else {
			if (cs.slice_data_empty?()) {
				return (0, null());
			}
			int maybe_cons = cs~load_uint(1);
			if (maybe_cons) {
				if (cs.slice_bits() < 5) {
					return (0, null());
				}
				cs~load_bits(5);
			}
			if (cs.slice_data_empty?()) {
				return (0, null());
			}
			int maybe_cons = cs~load_uint(1);
			if (maybe_cons) {
				if (cs.slice_bits() < 2) {
					return (0, null());
				}
				cs~load_bits(2);
			}
			if (cs.slice_data_empty?()) {
				return (0, null());
			}
			int maybe_cons = cs~load_uint(1);
			if (maybe_cons) {
				if (cs.slice_refs() == 0) {
					return (0, null());
				}
				cs~load_ref();
			}
			if (cs.slice_data_empty?()) {
				return (0, null());
			}
			int maybe_cons = cs~load_uint(1);
			if (maybe_cons) {
				if (cs.slice_refs() == 0) {
					return (0, null());
				}
				cs~load_ref();
			}
			if (cs.slice_data_empty?()) {
				return (0, null());
			}
			if (cs.slice_data_empty?()) {
				return (0, null());
			}
			int expected_bit = cs~load_uint(1);
			if (expected_bit != 0) {
				return (0, null());
			}
		}
	}
	if (cs.slice_data_empty?()) {
		return (0, null());
	}
	int either_cons = cs~load_uint(1);
	if (either_cons) {
		if (cs.slice_refs() == 0) {
			return (0, null());
		}
		cs~load_ref();
	} else {
	}
	return (-1, just_tuple([src, dest, amount]));
}
